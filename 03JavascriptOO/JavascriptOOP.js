//------Bases clases region-----
function Vehicle(maxU){
    return{
        speed: 0,
        maxUnit: maxU || 99,
        propulsionUnit: new Array(),
        getSpeed: function(){
            return speed; 
        },
        setMaxUnit: function(){
            if (typeof(value) == "Number")
                speed = value;
             else
                 return false;
            },
     
        getMaxUnit: function(){
            return maxUnit; 
        },
        getPropulsionUnit: function(){
            return propulsionUnit;
        },
        addPropulsionUnit: function(unit){
        if ( (unit instanceof PropulsionUnit) && (propulsionUnit.length < maxUnit))
            propulsionUnit.push(unit);
        },
        addListPropulsionUnits: function(arrayUnit){
        if(typeof(arrayUnit) == "Array" )
            for (unit in arrayUnit){
                addPropulsionUnit(unit);
            }
        },
        removePropulsionUnit: function(unitId){
            for(var i = propulsionUnit.length - 1; i >= 0; i--) {
                if(propulsionUnit[i].Id === unitId) {
                   propulsionUnit.splice(i, 1);
                }
            }
        },
        remoaAllPropulsionUnits: function(){
            propulsionUnit = [];
        },
        Accerelate: function(){
            for (unit in propulsionUnit)
            {
                speed += unit.generateAccerelation();
            }
        },
        Stop: function(){
            speed = 0;
        } 
    }
}

function PropulsionUnit(){
    //Its not necesary because the specified propulsions(whell,prop..) will
    //create a new generateAccerelation method
    this.generateAccerelation = function(){
        return undefined;
    }
}


//---------Specific propulsion unit region------
var vehicle = new Vehicle();

function Wheel(rad){
    var radius = rad;
    this.generateAccerelation = function(){
        return Math.PI*2*radius;
    }
}

function ProppellingNozzle(pow){
    var power  = pow;
    var afterBurner = false;
    
    this.isAfterBurnerOn = function(){
        return afterBurner;
    }
    
    this.switchAfterBurner = function(){
        if(afterBurner == false)
            afterBurner = true;
        else
            afterBurner = false;
    }
    
    this.generateAccerelation = function(){
        if (afterBurner == true)
            return power*2;
        return power;
    }
}

function Propeller(nFins, mult){
    var fins  = nFins;
    //multiplier is the power generated by each fin
    var multiplier = mult;
    var clockwise = true;
    
    this.isClockwise = function(){
        return clockwise;
    }
    
    this.switchDirection = function(){
        if(isClockwise == false)
            isClockwise = true;
        else
            isClockwise = false;
    }
    
    this.generateAccerelation = function(){
        if (isClockwise == true)
            return fins*mult ;
        return fins*mult*-1 ;
    } 
}


//-----Specific vehicles region----------
//Utilizo herencia parasitaria para que cada tipo de vehículo obtenga las funcionalidades 
//de Vehícle y agregue o personalice sus propiedades, extendiendo del mismo.
function AirVehicle(propelling){
    var that = Vehicle(1);
    // ""CONTRSUCTOR INI""
    that.addPropulsionUnit(propelling);
    
    //Public Members
    this.switchAfterBurner = function(){
        that.propulsioinUnit.first().switchAfterBurner();
    }
    this.checkAfterBurnerOn = function(){
        that.propulsioinUnit.first().isAfterBurnerOn();
    }
    this.Accerelate = function(){
        that.Accerelate();
    }
}

function LandVehicle(arrayOfWheels){
    // ""CONTRSUCTOR INI""
    var that = Vehicle(4);
    that.addListPropulsionUnits(arrayOfWheels);
    
    this.Accerelate = function(){
        that.Accerelate();
    }
}

function WaterVehicle(arrayOfProp){
     // ""CONTRSUCTOR INI""
    var that = Vehicle();
    that.addListPropulsionUnits(arrayOfProp); 
    
    //Public Members
    this.switchClockwiseDirection = function(){
        for(unit in that.propulsionUnit)
            unit.switchDirection();
    }
    
    this.checkClockwiseDirection = function(){
        for(unit in that.propulsionUnit)
            that.isClockwise();
    }
    this.Accerelate = function(){
        that.Accerelate();
    } 
}

function AmphibianVehicle(arrayOfProp, arrayOfWheels){
    var water = new WaterVehicle(arrayOfProp);
    var land = new LandVehicle(arrayOfWheels);
    var isLand = true;
    
    this.switchLand = function(){
        if(isLand ==true)
            isLand = false;
        else
            isLand = true;
    }
    this.Accerelate = function(){
        if(isLand)
            land.Accerelate();
        else
            water.Accerelate();
    }
}

//----Inheritance Region-----
//Como PropulsionUnit solo funciona como clase base utilizo la herencia pseudoclasica.
//De esta forma la utilidad esta dada en que las 3 clases son del tipo PropulsionUnit
Wheel.prototype = new PropulsionUnit();
ProppellingNozzle.prototype = new PropulsionUnit();
Propeller.prototype = new PropulsionUnit();

//Creación Land vehicle
var w1 = new Wheel(1.5);
var w2 = new Wheel(1.5);
var w3 = new Wheel(2);
var w4 = new Wheel(2);
var arrayWheels = [w1,w2,w3,w4];

var landVehicle = new LandVehicle(arrayWheels);

//Creacion Air vehicle
var pn = new ProppellingNozzle(350);
var airVehicle = new AirVehicle(pn);

//Creacion Water vehicle
var p1= new Propeller(8,1.5);
var p2 = new Propeller(8,1.5);
var arrayProp = [p1,p2];
var waterVehicle = new WaterVehicle();

//Creación de un vehiculo anfibio
var amphibianVehicle = new AmphibianVehicle(arrayProp, arrayWheels);








